
PWM-firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007ee  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018c  00800102  00800102  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f5  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000231  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000216  00000000  00000000  00001002  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b4  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000761  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	22 c0       	rjmp	.+68     	; 0x72 <__bad_interrupt>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	20 c0       	rjmp	.+64     	; 0x72 <__bad_interrupt>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	1c c0       	rjmp	.+56     	; 0x74 <__vector_29>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	ee ee       	ldi	r30, 0xEE	; 238
  50:	f7 e0       	ldi	r31, 0x07	; 7
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 30       	cpi	r26, 0x02	; 2
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	22 e0       	ldi	r18, 0x02	; 2
  60:	a2 e0       	ldi	r26, 0x02	; 2
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	ae 38       	cpi	r26, 0x8E	; 142
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	ad d1       	rcall	.+858    	; 0x3ca <main>
  70:	bc c3       	rjmp	.+1912   	; 0x7ea <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_29>:
void inline doTick (void);

uint16_t pwmCtr;
uint8_t stopFlag = 1;

ISR(TWI_SLAVE_vect) {
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	af 93       	push	r26
  82:	bf 93       	push	r27
  84:	ef 93       	push	r30
  86:	ff 93       	push	r31
	//volatile uint8_t dummy;
	
	if (TWSSRA & _BV(TWDIF)) {						// if we have a data value, put it in the buffer
  88:	80 91 a3 00 	lds	r24, 0x00A3
  8c:	87 fd       	sbrc	r24, 7
  8e:	57 c0       	rjmp	.+174    	; 0x13e <__vector_29+0xca>
		inbuf[inbufPtr] = TWSD;						// read in the data
		TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);			// ACK the byte
		inbufPtr++;									// increment the buffer pointer
	} 
	if (TWSSRA & _BV(TWASIF)) {
  90:	80 91 a3 00 	lds	r24, 0x00A3
  94:	86 ff       	sbrs	r24, 6
  96:	10 c0       	rjmp	.+32     	; 0xb8 <__vector_29+0x44>
		if (TWSSRA & _BV(TWAS)) {					// if we have an address, reset the input buffer
  98:	80 91 a3 00 	lds	r24, 0x00A3
  9c:	80 ff       	sbrs	r24, 0
  9e:	39 c0       	rjmp	.+114    	; 0x112 <__vector_29+0x9e>
			TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);		// ACK the byte; this is first since all our house keeping takes less 
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	80 93 a4 00 	sts	0x00A4, r24
													// time than getting our next byte, so we should do it first to speed the transaction
			TWSSRA |= _BV(TWASIF);					// clear the address match flag
  a6:	80 91 a3 00 	lds	r24, 0x00A3
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 93 a3 00 	sts	0x00A3, r24
			if (stopFlag) {							// if the last interrupt was caused by a stop condition, clear the buffer
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	81 11       	cpse	r24, r1
  b6:	54 c0       	rjmp	.+168    	; 0x160 <__vector_29+0xec>
			TWSSRA |= _BV(TWASIF);					// clear the address match flag
			if (inbufPtr) cmd = inbuf[0];
			stopFlag++;
		}
	} 
	if ((TWSSRA & _BV(TWBE)) || 
  b8:	80 91 a3 00 	lds	r24, 0x00A3
  bc:	82 fd       	sbrc	r24, 2
  be:	04 c0       	rjmp	.+8      	; 0xc8 <__vector_29+0x54>
		(TWSSRA & _BV(TWC))) {						// if we have an error, reset the input buffer and remove the error
  c0:	80 91 a3 00 	lds	r24, 0x00A3
			TWSSRA |= _BV(TWASIF);					// clear the address match flag
			if (inbufPtr) cmd = inbuf[0];
			stopFlag++;
		}
	} 
	if ((TWSSRA & _BV(TWBE)) || 
  c4:	83 ff       	sbrs	r24, 3
  c6:	1b c0       	rjmp	.+54     	; 0xfe <__vector_29+0x8a>
		(TWSSRA & _BV(TWC))) {						// if we have an error, reset the input buffer and remove the error
		inbufPtr = 0;
  c8:	10 92 cd 01 	sts	0x01CD, r1
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	e3 e0       	ldi	r30, 0x03	; 3
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	df 01       	movw	r26, r30
  d4:	1d 92       	st	X+, r1
  d6:	8a 95       	dec	r24
  d8:	e9 f7       	brne	.-6      	; 0xd4 <__vector_29+0x60>
		clearBuf(inbuf, (uint8_t)BUFLEN);
		stopFlag++;
  da:	80 91 00 01 	lds	r24, 0x0100
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 00 01 	sts	0x0100, r24
		TWSSRA |= _BV(TWBE);						// reset the bus error
  e4:	80 91 a3 00 	lds	r24, 0x00A3
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 93 a3 00 	sts	0x00A3, r24
		TWSSRA |= _BV(TWC);							// reset the bus collision
  ee:	80 91 a3 00 	lds	r24, 0x00A3
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 93 a3 00 	sts	0x00A3, r24
		TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);			// ACK the byte
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	80 93 a4 00 	sts	0x00A4, r24
	}
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti
				inbufPtr = 0;
				clearBuf(inbuf, (uint8_t)BUFLEN);
				stopFlag = 0;
			}
		} else {									// if we have a stop condition, set the command to the first byte
			TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);		// ACK the byte
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	80 93 a4 00 	sts	0x00A4, r24
			TWSSRA |= _BV(TWASIF);					// clear the address match flag
 118:	80 91 a3 00 	lds	r24, 0x00A3
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 93 a3 00 	sts	0x00A3, r24
			if (inbufPtr) cmd = inbuf[0];
 122:	80 91 cd 01 	lds	r24, 0x01CD
 126:	88 23       	and	r24, r24
 128:	21 f0       	breq	.+8      	; 0x132 <__vector_29+0xbe>
 12a:	80 91 03 01 	lds	r24, 0x0103
 12e:	80 93 02 01 	sts	0x0102, r24
			stopFlag++;
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 00 01 	sts	0x0100, r24
 13c:	bd cf       	rjmp	.-134    	; 0xb8 <__vector_29+0x44>

ISR(TWI_SLAVE_vect) {
	//volatile uint8_t dummy;
	
	if (TWSSRA & _BV(TWDIF)) {						// if we have a data value, put it in the buffer
		inbuf[inbufPtr] = TWSD;						// read in the data
 13e:	80 91 a0 00 	lds	r24, 0x00A0
 142:	e0 91 cd 01 	lds	r30, 0x01CD
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ed 5f       	subi	r30, 0xFD	; 253
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	80 83       	st	Z, r24
		TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);			// ACK the byte
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 a4 00 	sts	0x00A4, r24
		inbufPtr++;									// increment the buffer pointer
 154:	80 91 cd 01 	lds	r24, 0x01CD
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 cd 01 	sts	0x01CD, r24
 15e:	98 cf       	rjmp	.-208    	; 0x90 <__vector_29+0x1c>
		if (TWSSRA & _BV(TWAS)) {					// if we have an address, reset the input buffer
			TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);		// ACK the byte; this is first since all our house keeping takes less 
													// time than getting our next byte, so we should do it first to speed the transaction
			TWSSRA |= _BV(TWASIF);					// clear the address match flag
			if (stopFlag) {							// if the last interrupt was caused by a stop condition, clear the buffer
				inbufPtr = 0;
 160:	10 92 cd 01 	sts	0x01CD, r1
 164:	88 ec       	ldi	r24, 0xC8	; 200
 166:	e3 e0       	ldi	r30, 0x03	; 3
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	df 01       	movw	r26, r30
 16c:	1d 92       	st	X+, r1
 16e:	8a 95       	dec	r24
 170:	e9 f7       	brne	.-6      	; 0x16c <__vector_29+0xf8>
				clearBuf(inbuf, (uint8_t)BUFLEN);
				stopFlag = 0;
 172:	10 92 00 01 	sts	0x0100, r1
 176:	a0 cf       	rjmp	.-192    	; 0xb8 <__vector_29+0x44>

00000178 <getAddress>:
	//uint8_t pb = 0;
	uint8_t result = 0x81;	// set the top bit of the address in order to avoid stomping on the general call address
							// set the bottom bit so that it responds to the general call address 

	// set all lines to inputs
	DDRA = 0;
 178:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0;
 17a:	17 ba       	out	0x17, r1	; 23
	// read the input ports
	//pa = PINA;
	//pb = PINB;
	
	// map address pins into an address
	if (PINA & _BV(5)) result += 0x02;	// address bit 0
 17c:	cd 99       	sbic	0x19, 5	; 25
 17e:	0d c0       	rjmp	.+26     	; 0x19a <getAddress+0x22>
 180:	95 e8       	ldi	r25, 0x85	; 133

uint8_t getAddress (void) {

	//uint8_t pa = 0;
	//uint8_t pb = 0;
	uint8_t result = 0x81;	// set the top bit of the address in order to avoid stomping on the general call address
 182:	81 e8       	ldi	r24, 0x81	; 129
	//pa = PINA;
	//pb = PINB;
	
	// map address pins into an address
	if (PINA & _BV(5)) result += 0x02;	// address bit 0
	if (PINA & _BV(7)) result += 0x04;	// address bit 1
 184:	cf 99       	sbic	0x19, 7	; 25
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <getAddress+0x2a>
	if (PINA & _BV(0)) result += 0x08;	// address bit 2
 188:	c8 99       	sbic	0x19, 0	; 25
 18a:	88 5f       	subi	r24, 0xF8	; 248
	if (PINB & _BV(2)) result += 0x10;	// address bit 3
 18c:	b2 99       	sbic	0x16, 2	; 22
 18e:	80 5f       	subi	r24, 0xF0	; 240
	if (PINA & _BV(2)) result += 0x20;	// address bit 4
 190:	ca 99       	sbic	0x19, 2	; 25
 192:	80 5e       	subi	r24, 0xE0	; 224
	if (PINA & _BV(1)) result += 0x40;	// address bit 5
 194:	c9 99       	sbic	0x19, 1	; 25
 196:	80 5c       	subi	r24, 0xC0	; 192
	// turn off the pull-ups
	//PUEA = 0;
	//PUEB = 0;
	
	return result;
}
 198:	08 95       	ret
 19a:	97 e8       	ldi	r25, 0x87	; 135
	// read the input ports
	//pa = PINA;
	//pb = PINB;
	
	// map address pins into an address
	if (PINA & _BV(5)) result += 0x02;	// address bit 0
 19c:	83 e8       	ldi	r24, 0x83	; 131
	if (PINA & _BV(7)) result += 0x04;	// address bit 1
 19e:	cf 9b       	sbis	0x19, 7	; 25
 1a0:	f3 cf       	rjmp	.-26     	; 0x188 <getAddress+0x10>
 1a2:	89 2f       	mov	r24, r25
 1a4:	f1 cf       	rjmp	.-30     	; 0x188 <getAddress+0x10>

000001a6 <init>:
	//PUEB = 0;
	
	return result;
}

void init (uint8_t * in, uint8_t inlen, uint8_t * out, uint8_t outlen, uint8_t address) {
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	1f 92       	push	r1
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	7a 01       	movw	r14, r20
	
	DDRA = 0xaf;	// set everything except the TWI pins to output 
 1b8:	3f ea       	ldi	r19, 0xAF	; 175
 1ba:	3a bb       	out	0x1a, r19	; 26
	DDRB = 0x04;	// set everything to outputs except clock lines & reset
 1bc:	34 e0       	ldi	r19, 0x04	; 4
 1be:	37 bb       	out	0x17, r19	; 23
	
	// set up PWM outputs
	TCCR1A = _BV(COM1A0) | _BV(COM1A1) | _BV(COM1B0) | _BV(COM1B1) | _BV(WGM10);
 1c0:	51 ef       	ldi	r21, 0xF1	; 241
 1c2:	5f bd       	out	0x2f, r21	; 47
	TCCR2A = _BV(COM2A0) | _BV(COM2A1) | _BV(COM2B0) | _BV(COM2B1) | _BV(WGM20);
 1c4:	50 93 ca 00 	sts	0x00CA, r21
	TCCR1B = _BV(WGM12)	| _BV(CS10);
 1c8:	59 e0       	ldi	r21, 0x09	; 9
 1ca:	5e bd       	out	0x2e, r21	; 46
	TCCR2B = _BV(WGM22) | _BV(CS20);
 1cc:	50 93 c9 00 	sts	0x00C9, r21
	TOCPMSA0 = _BV(TOCC1S0);	
 1d0:	30 93 67 00 	sts	0x0067, r19
	TOCPMSA1 = _BV(TOCC4S0) | _BV(TOCC6S1) | _BV(TOCC7S1);
 1d4:	31 ea       	ldi	r19, 0xA1	; 161
 1d6:	30 93 68 00 	sts	0x0068, r19
	TOCPMCOE = _BV(TOCC1OE) | _BV(TOCC4OE) | _BV(TOCC6OE) | _BV(TOCC7OE);
 1da:	32 ed       	ldi	r19, 0xD2	; 210
 1dc:	30 93 66 00 	sts	0x0066, r19
	PWM_ALL = 0xff;
 1e0:	ef ef       	ldi	r30, 0xFF	; 255
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	fb bd       	out	0x2b, r31	; 43
 1e6:	ea bd       	out	0x2a, r30	; 42
	PWM_BLU = 0xff;
 1e8:	f0 93 c5 00 	sts	0x00C5, r31
 1ec:	e0 93 c4 00 	sts	0x00C4, r30
	PWM_GRN = 0xff;
 1f0:	f0 93 c3 00 	sts	0x00C3, r31
 1f4:	e0 93 c2 00 	sts	0x00C2, r30
	PWM_RED = 0xff;
 1f8:	f9 bd       	out	0x29, r31	; 41
 1fa:	e8 bd       	out	0x28, r30	; 40
	
	// set up the TWI interface and clear the buffers
	TWSA = address;
 1fc:	00 93 a2 00 	sts	0x00A2, r16
	TWSCRA = _BV(TWDIE) | _BV(TWASIE) | _BV(TWEN) | _BV(TWSIE); // | _BV(TWSME);
 200:	3c e3       	ldi	r19, 0x3C	; 60
 202:	30 93 a5 00 	sts	0x00A5, r19
	sei();
}

void clearBuf (uint8_t * buf, uint8_t len) {
	int i;
	for (i = 0; i < len; i++) buf[i] = 0;
 206:	66 23       	and	r22, r22
 208:	39 f0       	breq	.+14     	; 0x218 <init+0x72>
 20a:	46 2f       	mov	r20, r22
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	29 83       	std	Y+1, r18	; 0x01
 214:	e3 d2       	rcall	.+1478   	; 0x7dc <memset>
 216:	29 81       	ldd	r18, Y+1	; 0x01
 218:	22 23       	and	r18, r18
 21a:	31 f0       	breq	.+12     	; 0x228 <init+0x82>
 21c:	42 2f       	mov	r20, r18
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	c7 01       	movw	r24, r14
 226:	da d2       	rcall	.+1460   	; 0x7dc <memset>
	//TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);
	clearBuf(in, inlen);
	clearBuf(out, outlen);
	
	// set up SPI output
	SPCR = _BV(SPE) | _BV(MSTR);	// turn on the SPI bus in master mode
 228:	80 e5       	ldi	r24, 0x50	; 80
 22a:	80 93 b2 00 	sts	0x00B2, r24
	SPSR = _BV(SPI2X);				// turn it up to max speed (clk/2)
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 b1 00 	sts	0x00B1, r24
	REMAP = _BV(SPIMAP);			// remap the SPI pins to alternates
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	80 93 65 00 	sts	0x0065, r24
	
	DDRA = 0xaf;	// set everything except the TWI pins to output (makes sure PA0 is an output)
 23a:	8f ea       	ldi	r24, 0xAF	; 175
 23c:	8a bb       	out	0x1a, r24	; 26
	PUEA |= _BV(4) | _BV(6);
 23e:	80 91 63 00 	lds	r24, 0x0063
 242:	80 65       	ori	r24, 0x50	; 80
 244:	80 93 63 00 	sts	0x0063, r24
	
	// turn on interrupts and away we go
	sei();
 248:	78 94       	sei
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <clearBuf>:

void clearBuf (uint8_t * buf, uint8_t len) {
	int i;
	for (i = 0; i < len; i++) buf[i] = 0;
 258:	66 23       	and	r22, r22
 25a:	29 f0       	breq	.+10     	; 0x266 <clearBuf+0xe>
 25c:	46 2f       	mov	r20, r22
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	bb c2       	rjmp	.+1398   	; 0x7dc <memset>
 266:	08 95       	ret

00000268 <copyGRBBuf>:
}

void copyGRBBuf(uint8_t * in, uint8_t * out)
{
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	8b 01       	movw	r16, r22
 27a:	00 5f       	subi	r16, 0xF0	; 240
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
 27e:	03 96       	adiw	r24, 0x03	; 3
 280:	7b 01       	movw	r14, r22
 282:	20 ed       	ldi	r18, 0xD0	; 208
 284:	e2 0e       	add	r14, r18
 286:	f1 1c       	adc	r15, r1
 288:	b8 01       	movw	r22, r16
 28a:	68 50       	subi	r22, 0x08	; 8
 28c:	71 09       	sbc	r23, r1
 28e:	98 01       	movw	r18, r16
 290:	d8 01       	movw	r26, r16
 292:	50 97       	sbiw	r26, 0x10	; 16
 294:	fc 01       	movw	r30, r24
 296:	68 01       	movw	r12, r16
 298:	af 01       	movw	r20, r30
 29a:	42 50       	subi	r20, 0x02	; 2
 29c:	51 09       	sbc	r21, r1
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
			out[(15-col) + (row * 24)]		= in[((col*3) + 1) + (row * 24)] >> 2;	// copy the green (order is flipped)
 29e:	ea 01       	movw	r28, r20
 2a0:	48 81       	ld	r20, Y
 2a2:	46 95       	lsr	r20
 2a4:	46 95       	lsr	r20
 2a6:	e6 01       	movw	r28, r12
 2a8:	4a 93       	st	-Y, r20
 2aa:	6e 01       	movw	r12, r28
			out[col + (row * 24)]			= in[((col*3) + 3) + (row * 24)] >> 2;	// copy the blue
 2ac:	40 81       	ld	r20, Z
 2ae:	46 95       	lsr	r20
 2b0:	46 95       	lsr	r20
 2b2:	4d 93       	st	X+, r20
 2b4:	af 01       	movw	r20, r30
 2b6:	41 50       	subi	r20, 0x01	; 1
 2b8:	51 09       	sbc	r21, r1
			out[(col + 16) + (row * 24)]	= in[((col*3) + 2) + (row * 24)] >> 2;	// copy the red
 2ba:	ea 01       	movw	r28, r20
 2bc:	48 81       	ld	r20, Y
 2be:	46 95       	lsr	r20
 2c0:	46 95       	lsr	r20
 2c2:	e9 01       	movw	r28, r18
 2c4:	49 93       	st	Y+, r20
 2c6:	9e 01       	movw	r18, r28
 2c8:	33 96       	adiw	r30, 0x03	; 3
void copyGRBBuf(uint8_t * in, uint8_t * out)
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
 2ca:	a6 17       	cp	r26, r22
 2cc:	b7 07       	cpc	r27, r23
 2ce:	21 f7       	brne	.-56     	; 0x298 <copyGRBBuf+0x30>
 2d0:	08 5e       	subi	r16, 0xE8	; 232
 2d2:	1f 4f       	sbci	r17, 0xFF	; 255
 2d4:	48 96       	adiw	r24, 0x18	; 24

void copyGRBBuf(uint8_t * in, uint8_t * out)
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
 2d6:	0e 15       	cp	r16, r14
 2d8:	1f 05       	cpc	r17, r15
 2da:	b1 f6       	brne	.-84     	; 0x288 <copyGRBBuf+0x20>
			out[(15-col) + (row * 24)]		= in[((col*3) + 1) + (row * 24)] >> 2;	// copy the green (order is flipped)
			out[col + (row * 24)]			= in[((col*3) + 3) + (row * 24)] >> 2;	// copy the blue
			out[(col + 16) + (row * 24)]	= in[((col*3) + 2) + (row * 24)] >> 2;	// copy the red
		}
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	08 95       	ret

000002ee <copy3BitBuf>:

// Copy the R...G...B... bit string from a buffer encoded for the original buffer
// to the GRBGRBGRB... byte string required for PWM generation in this code
void copy3BitBuf(uint8_t * in, uint8_t * out)
{
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	8c 01       	movw	r16, r24
 308:	0f 5e       	subi	r16, 0xEF	; 239
 30a:	1f 4f       	sbci	r17, 0xFF	; 255
 30c:	7b 01       	movw	r14, r22
 30e:	6c 01       	movw	r12, r24
 310:	29 e1       	ldi	r18, 0x19	; 25
 312:	c2 0e       	add	r12, r18
 314:	d1 1c       	adc	r13, r1
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
			(in[row + 1] & _BV(col))	? out[((col + 16) + (row * 24))] = 0x3f	: (out[((col + 16) + (row * 24))] = 0);		// grab the red (first eight bytes of input)
 316:	8f e3       	ldi	r24, 0x3F	; 63
 318:	a8 2e       	mov	r10, r24
}

// Copy the R...G...B... bit string from a buffer encoded for the original buffer
// to the GRBGRBGRB... byte string required for PWM generation in this code
void copy3BitBuf(uint8_t * in, uint8_t * out)
{
 31a:	e7 01       	movw	r28, r14
 31c:	60 96       	adiw	r28, 0x10	; 16
 31e:	d7 01       	movw	r26, r14
 320:	18 96       	adiw	r26, 0x08	; 8
 322:	47 01       	movw	r8, r14
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	c8 01       	movw	r24, r16
 32a:	40 97       	sbiw	r24, 0x10	; 16
 32c:	b8 01       	movw	r22, r16
 32e:	68 50       	subi	r22, 0x08	; 8
 330:	71 09       	sbc	r23, r1
 332:	23 c0       	rjmp	.+70     	; 0x37a <__stack+0x7b>
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
			(in[row + 1] & _BV(col))	? out[((col + 16) + (row * 24))] = 0x3f	: (out[((col + 16) + (row * 24))] = 0);		// grab the red (first eight bytes of input)
 334:	a8 82       	st	Y, r10
			(in[row + 9] & _BV(col))	? out[(col + 8) + (row * 24)] = 0x3f	: (out[(col + 8) + (row * 24)] = 0);		// grab the green (next eight bytes of input)
 336:	fb 01       	movw	r30, r22
 338:	40 81       	ld	r20, Z
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0b 2c       	mov	r0, r11
 33e:	02 c0       	rjmp	.+4      	; 0x344 <__stack+0x45>
 340:	55 95       	asr	r21
 342:	47 95       	ror	r20
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <__stack+0x41>
 348:	40 ff       	sbrs	r20, 0
 34a:	27 c0       	rjmp	.+78     	; 0x39a <__stack+0x9b>
 34c:	ac 92       	st	X, r10
			(in[row + 17] & _BV(col))	? out[(col) + (row * 24)] = 0x3f		: (out[(col) + (row * 24)] = 0);			// grab the green (next eight bytes of input)
 34e:	f8 01       	movw	r30, r16
 350:	40 81       	ld	r20, Z
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <__stack+0x5b>
 356:	55 95       	asr	r21
 358:	47 95       	ror	r20
 35a:	ba 94       	dec	r11
 35c:	e2 f7       	brpl	.-8      	; 0x356 <__stack+0x57>
 35e:	f4 01       	movw	r30, r8
 360:	40 ff       	sbrs	r20, 0
 362:	19 c0       	rjmp	.+50     	; 0x396 <__stack+0x97>
 364:	a0 82       	st	Z, r10
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	ff ef       	ldi	r31, 0xFF	; 255
 36c:	8f 1a       	sub	r8, r31
 36e:	9f 0a       	sbc	r9, r31
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	21 96       	adiw	r28, 0x01	; 1
void copy3BitBuf(uint8_t * in, uint8_t * out)
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
 374:	28 30       	cpi	r18, 0x08	; 8
 376:	31 05       	cpc	r19, r1
 378:	91 f0       	breq	.+36     	; 0x39e <__stack+0x9f>
			(in[row + 1] & _BV(col))	? out[((col + 16) + (row * 24))] = 0x3f	: (out[((col + 16) + (row * 24))] = 0);		// grab the red (first eight bytes of input)
 37a:	b2 2e       	mov	r11, r18
 37c:	fc 01       	movw	r30, r24
 37e:	40 81       	ld	r20, Z
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <__stack+0x8b>
 386:	55 95       	asr	r21
 388:	47 95       	ror	r20
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <__stack+0x87>
 38e:	40 fd       	sbrc	r20, 0
 390:	d1 cf       	rjmp	.-94     	; 0x334 <__stack+0x35>
 392:	18 82       	st	Y, r1
 394:	d0 cf       	rjmp	.-96     	; 0x336 <__stack+0x37>
			(in[row + 9] & _BV(col))	? out[(col + 8) + (row * 24)] = 0x3f	: (out[(col + 8) + (row * 24)] = 0);		// grab the green (next eight bytes of input)
			(in[row + 17] & _BV(col))	? out[(col) + (row * 24)] = 0x3f		: (out[(col) + (row * 24)] = 0);			// grab the green (next eight bytes of input)
 396:	10 82       	st	Z, r1
 398:	e6 cf       	rjmp	.-52     	; 0x366 <__stack+0x67>
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
			(in[row + 1] & _BV(col))	? out[((col + 16) + (row * 24))] = 0x3f	: (out[((col + 16) + (row * 24))] = 0);		// grab the red (first eight bytes of input)
			(in[row + 9] & _BV(col))	? out[(col + 8) + (row * 24)] = 0x3f	: (out[(col + 8) + (row * 24)] = 0);		// grab the green (next eight bytes of input)
 39a:	1c 92       	st	X, r1
 39c:	d8 cf       	rjmp	.-80     	; 0x34e <__stack+0x4f>
 39e:	0f 5f       	subi	r16, 0xFF	; 255
 3a0:	1f 4f       	sbci	r17, 0xFF	; 255
 3a2:	28 e1       	ldi	r18, 0x18	; 24
 3a4:	e2 0e       	add	r14, r18
 3a6:	f1 1c       	adc	r15, r1
// to the GRBGRBGRB... byte string required for PWM generation in this code
void copy3BitBuf(uint8_t * in, uint8_t * out)
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
 3a8:	0c 15       	cp	r16, r12
 3aa:	1d 05       	cpc	r17, r13
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <__stack+0xb1>
 3ae:	b5 cf       	rjmp	.-150    	; 0x31a <__stack+0x1b>
			(in[row + 1] & _BV(col))	? out[((col + 16) + (row * 24))] = 0x3f	: (out[((col + 16) + (row * 24))] = 0);		// grab the red (first eight bytes of input)
			(in[row + 9] & _BV(col))	? out[(col + 8) + (row * 24)] = 0x3f	: (out[(col + 8) + (row * 24)] = 0);		// grab the green (next eight bytes of input)
			(in[row + 17] & _BV(col))	? out[(col) + (row * 24)] = 0x3f		: (out[(col) + (row * 24)] = 0);			// grab the green (next eight bytes of input)
		}
	}
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	df 90       	pop	r13
 3be:	cf 90       	pop	r12
 3c0:	bf 90       	pop	r11
 3c2:	af 90       	pop	r10
 3c4:	9f 90       	pop	r9
 3c6:	8f 90       	pop	r8
 3c8:	08 95       	ret

000003ca <main>:
		TWSCRB = _BV(TWCMD0) | _BV(TWCMD1);			// ACK the byte
	}
}


int main(void) {
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	6e 97       	sbiw	r28, 0x1e	; 30
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
		
	init(inbuf, (uint8_t)BUFLEN, output, (uint8_t)OUTLEN, getAddress());
 3de:	cc de       	rcall	.-616    	; 0x178 <getAddress>
 3e0:	08 2f       	mov	r16, r24
 3e2:	20 ec       	ldi	r18, 0xC0	; 192
 3e4:	4e ec       	ldi	r20, 0xCE	; 206
 3e6:	51 e0       	ldi	r21, 0x01	; 1
 3e8:	68 ec       	ldi	r22, 0xC8	; 200
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	db de       	rcall	.-586    	; 0x1a6 <init>
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 3f0:	1a 8e       	std	Y+26, r1	; 0x1a
 3f2:	2a 8d       	ldd	r18, Y+26	; 0x1a
 3f4:	28 30       	cpi	r18, 0x08	; 8
 3f6:	88 f0       	brcs	.+34     	; 0x41a <main+0x50>
		
	init(inbuf, (uint8_t)BUFLEN, output, (uint8_t)OUTLEN, getAddress());
	
    while(1) {
		doTick();
        switch (cmd) {
 3f8:	80 91 02 01 	lds	r24, 0x0102
 3fc:	84 30       	cpi	r24, 0x04	; 4
 3fe:	09 f4       	brne	.+2      	; 0x402 <main+0x38>
 400:	e6 c1       	rjmp	.+972    	; 0x7ce <main+0x404>
 402:	08 f4       	brcc	.+2      	; 0x406 <main+0x3c>
 404:	93 c1       	rjmp	.+806    	; 0x72c <main+0x362>
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	09 f4       	brne	.+2      	; 0x40c <main+0x42>
 40a:	9d c1       	rjmp	.+826    	; 0x746 <main+0x37c>
 40c:	80 32       	cpi	r24, 0x20	; 32
 40e:	09 f4       	brne	.+2      	; 0x412 <main+0x48>
 410:	d5 c1       	rjmp	.+938    	; 0x7bc <main+0x3f2>
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	09 f4       	brne	.+2      	; 0x418 <main+0x4e>
 416:	7a c1       	rjmp	.+756    	; 0x70c <main+0x342>
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 418:	1a 8e       	std	Y+26, r1	; 0x1a
		select = rowSelect * 24;
		for (pwmCtr = 0; pwmCtr < 64; pwmCtr++) {
 41a:	10 92 cc 01 	sts	0x01CC, r1
 41e:	10 92 cb 01 	sts	0x01CB, r1
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0a 8c       	ldd	r0, Y+26	; 0x1a
 428:	02 c0       	rjmp	.+4      	; 0x42e <main+0x64>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <main+0x60>
 432:	28 2f       	mov	r18, r24
 434:	20 95       	com	r18
 436:	29 83       	std	Y+1, r18	; 0x01
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
		select = rowSelect * 24;
 438:	8a 8d       	ldd	r24, Y+26	; 0x1a
 43a:	88 0f       	add	r24, r24
 43c:	3a 8d       	ldd	r19, Y+26	; 0x1a
 43e:	83 0f       	add	r24, r19
 440:	88 0f       	add	r24, r24
 442:	88 0f       	add	r24, r24
 444:	88 0f       	add	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	8c 01       	movw	r16, r24
 44a:	02 53       	subi	r16, 0x32	; 50
 44c:	1e 4f       	sbci	r17, 0xFE	; 254
 44e:	bc 01       	movw	r22, r24
 450:	61 53       	subi	r22, 0x31	; 49
 452:	7e 4f       	sbci	r23, 0xFE	; 254
 454:	ac 01       	movw	r20, r24
 456:	40 53       	subi	r20, 0x30	; 48
 458:	5e 4f       	sbci	r21, 0xFE	; 254
 45a:	dc 01       	movw	r26, r24
 45c:	af 52       	subi	r26, 0x2F	; 47
 45e:	be 4f       	sbci	r27, 0xFE	; 254
 460:	6d 01       	movw	r12, r26
 462:	fc 01       	movw	r30, r24
 464:	ee 52       	subi	r30, 0x2E	; 46
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	fc 8f       	std	Y+28, r31	; 0x1c
 46a:	eb 8f       	std	Y+27, r30	; 0x1b
 46c:	dc 01       	movw	r26, r24
 46e:	ad 52       	subi	r26, 0x2D	; 45
 470:	be 4f       	sbci	r27, 0xFE	; 254
 472:	9c 01       	movw	r18, r24
 474:	2c 52       	subi	r18, 0x2C	; 44
 476:	3e 4f       	sbci	r19, 0xFE	; 254
 478:	3e 8f       	std	Y+30, r19	; 0x1e
 47a:	2d 8f       	std	Y+29, r18	; 0x1d
 47c:	fc 01       	movw	r30, r24
 47e:	eb 52       	subi	r30, 0x2B	; 43
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	5f 01       	movw	r10, r30
 484:	9c 01       	movw	r18, r24
 486:	2a 52       	subi	r18, 0x2A	; 42
 488:	3e 4f       	sbci	r19, 0xFE	; 254
 48a:	49 01       	movw	r8, r18
 48c:	fc 01       	movw	r30, r24
 48e:	e9 52       	subi	r30, 0x29	; 41
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	3f 01       	movw	r6, r30
 494:	9c 01       	movw	r18, r24
 496:	28 52       	subi	r18, 0x28	; 40
 498:	3e 4f       	sbci	r19, 0xFE	; 254
 49a:	29 01       	movw	r4, r18
 49c:	fc 01       	movw	r30, r24
 49e:	e7 52       	subi	r30, 0x27	; 39
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	1f 01       	movw	r2, r30
 4a4:	9c 01       	movw	r18, r24
 4a6:	26 52       	subi	r18, 0x26	; 38
 4a8:	3e 4f       	sbci	r19, 0xFE	; 254
 4aa:	3b 83       	std	Y+3, r19	; 0x03
 4ac:	2a 83       	std	Y+2, r18	; 0x02
 4ae:	fc 01       	movw	r30, r24
 4b0:	e5 52       	subi	r30, 0x25	; 37
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	fd 83       	std	Y+5, r31	; 0x05
 4b6:	ec 83       	std	Y+4, r30	; 0x04
 4b8:	9c 01       	movw	r18, r24
 4ba:	24 52       	subi	r18, 0x24	; 36
 4bc:	3e 4f       	sbci	r19, 0xFE	; 254
 4be:	3f 83       	std	Y+7, r19	; 0x07
 4c0:	2e 83       	std	Y+6, r18	; 0x06
 4c2:	fc 01       	movw	r30, r24
 4c4:	e3 52       	subi	r30, 0x23	; 35
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	f9 87       	std	Y+9, r31	; 0x09
 4ca:	e8 87       	std	Y+8, r30	; 0x08
 4cc:	9c 01       	movw	r18, r24
 4ce:	22 52       	subi	r18, 0x22	; 34
 4d0:	3e 4f       	sbci	r19, 0xFE	; 254
 4d2:	3b 87       	std	Y+11, r19	; 0x0b
 4d4:	2a 87       	std	Y+10, r18	; 0x0a
 4d6:	fc 01       	movw	r30, r24
 4d8:	e1 52       	subi	r30, 0x21	; 33
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	fd 87       	std	Y+13, r31	; 0x0d
 4de:	ec 87       	std	Y+12, r30	; 0x0c
 4e0:	9c 01       	movw	r18, r24
 4e2:	20 52       	subi	r18, 0x20	; 32
 4e4:	3e 4f       	sbci	r19, 0xFE	; 254
 4e6:	3f 87       	std	Y+15, r19	; 0x0f
 4e8:	2e 87       	std	Y+14, r18	; 0x0e
 4ea:	fc 01       	movw	r30, r24
 4ec:	ef 51       	subi	r30, 0x1F	; 31
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	f9 8b       	std	Y+17, r31	; 0x11
 4f2:	e8 8b       	std	Y+16, r30	; 0x10
 4f4:	9c 01       	movw	r18, r24
 4f6:	2e 51       	subi	r18, 0x1E	; 30
 4f8:	3e 4f       	sbci	r19, 0xFE	; 254
 4fa:	3b 8b       	std	Y+19, r19	; 0x13
 4fc:	2a 8b       	std	Y+18, r18	; 0x12
 4fe:	fc 01       	movw	r30, r24
 500:	ed 51       	subi	r30, 0x1D	; 29
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	fd 8b       	std	Y+21, r31	; 0x15
 506:	ec 8b       	std	Y+20, r30	; 0x14
 508:	9c 01       	movw	r18, r24
 50a:	2c 51       	subi	r18, 0x1C	; 28
 50c:	3e 4f       	sbci	r19, 0xFE	; 254
 50e:	3f 8b       	std	Y+23, r19	; 0x17
 510:	2e 8b       	std	Y+22, r18	; 0x16
 512:	fc 01       	movw	r30, r24
 514:	eb 51       	subi	r30, 0x1B	; 27
 516:	fe 4f       	sbci	r31, 0xFE	; 254
 518:	f9 8f       	std	Y+25, r31	; 0x19
 51a:	e8 8f       	std	Y+24, r30	; 0x18
 51c:	78 01       	movw	r14, r16
 51e:	8b 01       	movw	r16, r22
 520:	ba 01       	movw	r22, r20
		for (pwmCtr = 0; pwmCtr < 64; pwmCtr++) {
			// Since we're overloading what would otherwise be the MISO line to be the latch line, we need to disable & re-enable SPI every cycle
			SPCR = 0;
 522:	10 92 b2 00 	sts	0x00B2, r1
			PORTA &= ~_BV(0);	
 526:	d8 98       	cbi	0x1b, 0	; 27
			PORTA |= _BV(0);
 528:	d8 9a       	sbi	0x1b, 0	; 27
			SPCR = _BV(SPE) | _BV(MSTR);	// turn on the SPI bus in master mode
 52a:	f0 e5       	ldi	r31, 0x50	; 80
 52c:	f0 93 b2 00 	sts	0x00B2, r31
			
			//PORTA |= _BV(0);					// drive the latch line high
			//SPDR = ~_BV(rowSelect);
			//PORTA &= ~_BV(0);					// clear the latch line
			// write out the blue LEDs
			SPDR = ~_BV(rowSelect);
 530:	29 81       	ldd	r18, Y+1	; 0x01
 532:	20 93 b0 00 	sts	0x00B0, r18
			out = 0xff;
			(output[select + 0] <= pwmCtr)	? (out |= _BV(0)) : (out &= ~_BV(0));
 536:	80 91 cb 01 	lds	r24, 0x01CB
 53a:	90 91 cc 01 	lds	r25, 0x01CC
 53e:	f7 01       	movw	r30, r14
 540:	20 81       	ld	r18, Z
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	82 17       	cp	r24, r18
 546:	93 07       	cpc	r25, r19
 548:	08 f4       	brcc	.+2      	; 0x54c <main+0x182>
 54a:	ed c0       	rjmp	.+474    	; 0x726 <main+0x35c>
 54c:	4d ef       	ldi	r20, 0xFD	; 253
 54e:	5f ef       	ldi	r21, 0xFF	; 255
			(output[select + 1] <= pwmCtr)	? (out |= _BV(1)) : (out &= ~_BV(1));
 550:	f8 01       	movw	r30, r16
 552:	20 81       	ld	r18, Z
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	82 17       	cp	r24, r18
 558:	93 07       	cpc	r25, r19
 55a:	08 f0       	brcs	.+2      	; 0x55e <main+0x194>
 55c:	45 2f       	mov	r20, r21
			(output[select + 2] <= pwmCtr)	? (out |= _BV(2)) : (out &= ~_BV(2));
 55e:	fb 01       	movw	r30, r22
 560:	20 81       	ld	r18, Z
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	82 17       	cp	r24, r18
 566:	93 07       	cpc	r25, r19
 568:	08 f4       	brcc	.+2      	; 0x56c <main+0x1a2>
 56a:	4b 7f       	andi	r20, 0xFB	; 251
			(output[select + 3] <= pwmCtr)	? (out |= _BV(3)) : (out &= ~_BV(3));
 56c:	f6 01       	movw	r30, r12
 56e:	20 81       	ld	r18, Z
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	82 17       	cp	r24, r18
 574:	93 07       	cpc	r25, r19
 576:	08 f4       	brcc	.+2      	; 0x57a <main+0x1b0>
 578:	47 7f       	andi	r20, 0xF7	; 247
			(output[select + 4] <= pwmCtr)	? (out |= _BV(4)) : (out &= ~_BV(4));
 57a:	eb 8d       	ldd	r30, Y+27	; 0x1b
 57c:	fc 8d       	ldd	r31, Y+28	; 0x1c
 57e:	20 81       	ld	r18, Z
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	82 17       	cp	r24, r18
 584:	93 07       	cpc	r25, r19
 586:	08 f4       	brcc	.+2      	; 0x58a <main+0x1c0>
 588:	4f 7e       	andi	r20, 0xEF	; 239
			(output[select + 5] <= pwmCtr)	? (out |= _BV(5)) : (out &= ~_BV(5));
 58a:	2c 91       	ld	r18, X
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	82 17       	cp	r24, r18
 590:	93 07       	cpc	r25, r19
 592:	08 f4       	brcc	.+2      	; 0x596 <main+0x1cc>
 594:	4f 7d       	andi	r20, 0xDF	; 223
			(output[select + 6] <= pwmCtr)	? (out |= _BV(6)) : (out &= ~_BV(6));
 596:	ed 8d       	ldd	r30, Y+29	; 0x1d
 598:	fe 8d       	ldd	r31, Y+30	; 0x1e
 59a:	20 81       	ld	r18, Z
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	82 17       	cp	r24, r18
 5a0:	93 07       	cpc	r25, r19
 5a2:	08 f4       	brcc	.+2      	; 0x5a6 <main+0x1dc>
 5a4:	4f 7b       	andi	r20, 0xBF	; 191
			(output[select + 7] <= pwmCtr)	? (out |= _BV(7)) : (out &= ~_BV(7));
 5a6:	f5 01       	movw	r30, r10
 5a8:	20 81       	ld	r18, Z
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	82 17       	cp	r24, r18
 5ae:	93 07       	cpc	r25, r19
 5b0:	08 f4       	brcc	.+2      	; 0x5b4 <main+0x1ea>
 5b2:	4f 77       	andi	r20, 0x7F	; 127
			
			SPDR = out;
 5b4:	40 93 b0 00 	sts	0x00B0, r20
			// write out the green LEDs
			out = 0xff;
			(output[select + 8] <= pwmCtr)	? (out |= _BV(0)) : (out &= ~_BV(0));
 5b8:	80 91 cb 01 	lds	r24, 0x01CB
 5bc:	90 91 cc 01 	lds	r25, 0x01CC
 5c0:	f4 01       	movw	r30, r8
 5c2:	20 81       	ld	r18, Z
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	82 17       	cp	r24, r18
 5c8:	93 07       	cpc	r25, r19
 5ca:	08 f4       	brcc	.+2      	; 0x5ce <main+0x204>
 5cc:	a9 c0       	rjmp	.+338    	; 0x720 <main+0x356>
 5ce:	4d ef       	ldi	r20, 0xFD	; 253
 5d0:	5f ef       	ldi	r21, 0xFF	; 255
			(output[select + 9] <= pwmCtr)	? (out |= _BV(1)) : (out &= ~_BV(1));
 5d2:	f3 01       	movw	r30, r6
 5d4:	20 81       	ld	r18, Z
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	82 17       	cp	r24, r18
 5da:	93 07       	cpc	r25, r19
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <main+0x216>
 5de:	45 2f       	mov	r20, r21
			(output[select + 10] <= pwmCtr)	? (out |= _BV(2)) : (out &= ~_BV(2));
 5e0:	f2 01       	movw	r30, r4
 5e2:	20 81       	ld	r18, Z
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	08 f4       	brcc	.+2      	; 0x5ee <main+0x224>
 5ec:	4b 7f       	andi	r20, 0xFB	; 251
			(output[select + 11] <= pwmCtr)	? (out |= _BV(3)) : (out &= ~_BV(3));
 5ee:	f1 01       	movw	r30, r2
 5f0:	20 81       	ld	r18, Z
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	82 17       	cp	r24, r18
 5f6:	93 07       	cpc	r25, r19
 5f8:	08 f4       	brcc	.+2      	; 0x5fc <main+0x232>
 5fa:	47 7f       	andi	r20, 0xF7	; 247
			(output[select + 12] <= pwmCtr)	? (out |= _BV(4)) : (out &= ~_BV(4));
 5fc:	ea 81       	ldd	r30, Y+2	; 0x02
 5fe:	fb 81       	ldd	r31, Y+3	; 0x03
 600:	20 81       	ld	r18, Z
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	82 17       	cp	r24, r18
 606:	93 07       	cpc	r25, r19
 608:	08 f4       	brcc	.+2      	; 0x60c <main+0x242>
 60a:	4f 7e       	andi	r20, 0xEF	; 239
			(output[select + 13] <= pwmCtr)	? (out |= _BV(5)) : (out &= ~_BV(5));
 60c:	ec 81       	ldd	r30, Y+4	; 0x04
 60e:	fd 81       	ldd	r31, Y+5	; 0x05
 610:	20 81       	ld	r18, Z
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	82 17       	cp	r24, r18
 616:	93 07       	cpc	r25, r19
 618:	08 f4       	brcc	.+2      	; 0x61c <main+0x252>
 61a:	4f 7d       	andi	r20, 0xDF	; 223
			(output[select + 14] <= pwmCtr)	? (out |= _BV(6)) : (out &= ~_BV(6));
 61c:	ee 81       	ldd	r30, Y+6	; 0x06
 61e:	ff 81       	ldd	r31, Y+7	; 0x07
 620:	20 81       	ld	r18, Z
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	82 17       	cp	r24, r18
 626:	93 07       	cpc	r25, r19
 628:	08 f4       	brcc	.+2      	; 0x62c <main+0x262>
 62a:	4f 7b       	andi	r20, 0xBF	; 191
			(output[select + 15] <= pwmCtr)	? (out |= _BV(7)) : (out &= ~_BV(7));
 62c:	e8 85       	ldd	r30, Y+8	; 0x08
 62e:	f9 85       	ldd	r31, Y+9	; 0x09
 630:	20 81       	ld	r18, Z
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	82 17       	cp	r24, r18
 636:	93 07       	cpc	r25, r19
 638:	08 f4       	brcc	.+2      	; 0x63c <main+0x272>
 63a:	4f 77       	andi	r20, 0x7F	; 127
			SPDR = out;
 63c:	40 93 b0 00 	sts	0x00B0, r20
			// write out the red LEDs
			out = 0xff;
			(output[select + 16] <= pwmCtr)	? (out |= _BV(0)) : (out &= ~_BV(0));
 640:	80 91 cb 01 	lds	r24, 0x01CB
 644:	90 91 cc 01 	lds	r25, 0x01CC
 648:	ea 85       	ldd	r30, Y+10	; 0x0a
 64a:	fb 85       	ldd	r31, Y+11	; 0x0b
 64c:	20 81       	ld	r18, Z
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	08 f4       	brcc	.+2      	; 0x658 <main+0x28e>
 656:	61 c0       	rjmp	.+194    	; 0x71a <main+0x350>
 658:	4d ef       	ldi	r20, 0xFD	; 253
 65a:	5f ef       	ldi	r21, 0xFF	; 255
			(output[select + 17] <= pwmCtr)	? (out |= _BV(1)) : (out &= ~_BV(1));
 65c:	ec 85       	ldd	r30, Y+12	; 0x0c
 65e:	fd 85       	ldd	r31, Y+13	; 0x0d
 660:	20 81       	ld	r18, Z
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	82 17       	cp	r24, r18
 666:	93 07       	cpc	r25, r19
 668:	08 f0       	brcs	.+2      	; 0x66c <main+0x2a2>
 66a:	45 2f       	mov	r20, r21
			(output[select + 18] <= pwmCtr)	? (out |= _BV(2)) : (out &= ~_BV(2));
 66c:	ee 85       	ldd	r30, Y+14	; 0x0e
 66e:	ff 85       	ldd	r31, Y+15	; 0x0f
 670:	20 81       	ld	r18, Z
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	82 17       	cp	r24, r18
 676:	93 07       	cpc	r25, r19
 678:	08 f4       	brcc	.+2      	; 0x67c <main+0x2b2>
 67a:	4b 7f       	andi	r20, 0xFB	; 251
			(output[select + 19] <= pwmCtr)	? (out |= _BV(3)) : (out &= ~_BV(3));
 67c:	e8 89       	ldd	r30, Y+16	; 0x10
 67e:	f9 89       	ldd	r31, Y+17	; 0x11
 680:	20 81       	ld	r18, Z
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	82 17       	cp	r24, r18
 686:	93 07       	cpc	r25, r19
 688:	08 f4       	brcc	.+2      	; 0x68c <main+0x2c2>
 68a:	47 7f       	andi	r20, 0xF7	; 247
			(output[select + 20] <= pwmCtr)	? (out |= _BV(4)) : (out &= ~_BV(4));
 68c:	ea 89       	ldd	r30, Y+18	; 0x12
 68e:	fb 89       	ldd	r31, Y+19	; 0x13
 690:	20 81       	ld	r18, Z
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	82 17       	cp	r24, r18
 696:	93 07       	cpc	r25, r19
 698:	08 f4       	brcc	.+2      	; 0x69c <main+0x2d2>
 69a:	4f 7e       	andi	r20, 0xEF	; 239
			(output[select + 21] <= pwmCtr)	? (out |= _BV(5)) : (out &= ~_BV(5));
 69c:	ec 89       	ldd	r30, Y+20	; 0x14
 69e:	fd 89       	ldd	r31, Y+21	; 0x15
 6a0:	20 81       	ld	r18, Z
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	82 17       	cp	r24, r18
 6a6:	93 07       	cpc	r25, r19
 6a8:	08 f4       	brcc	.+2      	; 0x6ac <main+0x2e2>
 6aa:	4f 7d       	andi	r20, 0xDF	; 223
			(output[select + 22] <= pwmCtr)	? (out |= _BV(6)) : (out &= ~_BV(6));
 6ac:	ee 89       	ldd	r30, Y+22	; 0x16
 6ae:	ff 89       	ldd	r31, Y+23	; 0x17
 6b0:	20 81       	ld	r18, Z
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	82 17       	cp	r24, r18
 6b6:	93 07       	cpc	r25, r19
 6b8:	08 f4       	brcc	.+2      	; 0x6bc <main+0x2f2>
 6ba:	4f 7b       	andi	r20, 0xBF	; 191
			(output[select + 23] <= pwmCtr)	? (out |= _BV(7)) : (out &= ~_BV(7));
 6bc:	e8 8d       	ldd	r30, Y+24	; 0x18
 6be:	f9 8d       	ldd	r31, Y+25	; 0x19
 6c0:	20 81       	ld	r18, Z
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	82 17       	cp	r24, r18
 6c6:	93 07       	cpc	r25, r19
 6c8:	08 f4       	brcc	.+2      	; 0x6cc <main+0x302>
 6ca:	4f 77       	andi	r20, 0x7F	; 127
			SPDR = out;
 6cc:	40 93 b0 00 	sts	0x00B0, r20
 6d0:	2b 8d       	ldd	r18, Y+27	; 0x1b
 6d2:	3c 8d       	ldd	r19, Y+28	; 0x1c
 6d4:	ed 8d       	ldd	r30, Y+29	; 0x1d
 6d6:	fe 8d       	ldd	r31, Y+30	; 0x1e
			while (!(SPSR & _BV(SPIF)));	// wait for the last SPI transmission to finish
 6d8:	80 91 b1 00 	lds	r24, 0x00B1
 6dc:	87 ff       	sbrs	r24, 7
 6de:	fc cf       	rjmp	.-8      	; 0x6d8 <main+0x30e>
 6e0:	3c 8f       	std	Y+28, r19	; 0x1c
 6e2:	2b 8f       	std	Y+27, r18	; 0x1b
 6e4:	fe 8f       	std	Y+30, r31	; 0x1e
 6e6:	ed 8f       	std	Y+29, r30	; 0x1d
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
		select = rowSelect * 24;
		for (pwmCtr = 0; pwmCtr < 64; pwmCtr++) {
 6e8:	80 91 cb 01 	lds	r24, 0x01CB
 6ec:	90 91 cc 01 	lds	r25, 0x01CC
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	90 93 cc 01 	sts	0x01CC, r25
 6f6:	80 93 cb 01 	sts	0x01CB, r24
 6fa:	80 34       	cpi	r24, 0x40	; 64
 6fc:	91 05       	cpc	r25, r1
 6fe:	08 f4       	brcc	.+2      	; 0x702 <main+0x338>
 700:	10 cf       	rjmp	.-480    	; 0x522 <main+0x158>
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 702:	fa 8d       	ldd	r31, Y+26	; 0x1a
 704:	ff 5f       	subi	r31, 0xFF	; 255
 706:	fa 8f       	std	Y+26, r31	; 0x1a
 708:	2f 2f       	mov	r18, r31
 70a:	74 ce       	rjmp	.-792    	; 0x3f4 <main+0x2a>
			break;
			case RGB_CMD_GRN_DIM:
				PWM_GRN = inbuf[1];
			break;
			case RGB_CMD_RED_DIM:
				PWM_RED = inbuf[1];
 70c:	80 91 04 01 	lds	r24, 0x0104
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	99 bd       	out	0x29, r25	; 41
 714:	88 bd       	out	0x28, r24	; 40
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 716:	1a 8e       	std	Y+26, r1	; 0x1a
			case RGB_CMD_GRN_DIM:
				PWM_GRN = inbuf[1];
			break;
			case RGB_CMD_RED_DIM:
				PWM_RED = inbuf[1];
			break;
 718:	80 ce       	rjmp	.-768    	; 0x41a <main+0x50>
			(output[select + 14] <= pwmCtr)	? (out |= _BV(6)) : (out &= ~_BV(6));
			(output[select + 15] <= pwmCtr)	? (out |= _BV(7)) : (out &= ~_BV(7));
			SPDR = out;
			// write out the red LEDs
			out = 0xff;
			(output[select + 16] <= pwmCtr)	? (out |= _BV(0)) : (out &= ~_BV(0));
 71a:	4c ef       	ldi	r20, 0xFC	; 252
 71c:	5e ef       	ldi	r21, 0xFE	; 254
 71e:	9e cf       	rjmp	.-196    	; 0x65c <main+0x292>
			(output[select + 7] <= pwmCtr)	? (out |= _BV(7)) : (out &= ~_BV(7));
			
			SPDR = out;
			// write out the green LEDs
			out = 0xff;
			(output[select + 8] <= pwmCtr)	? (out |= _BV(0)) : (out &= ~_BV(0));
 720:	4c ef       	ldi	r20, 0xFC	; 252
 722:	5e ef       	ldi	r21, 0xFE	; 254
 724:	56 cf       	rjmp	.-340    	; 0x5d2 <main+0x208>
			//SPDR = ~_BV(rowSelect);
			//PORTA &= ~_BV(0);					// clear the latch line
			// write out the blue LEDs
			SPDR = ~_BV(rowSelect);
			out = 0xff;
			(output[select + 0] <= pwmCtr)	? (out |= _BV(0)) : (out &= ~_BV(0));
 726:	4c ef       	ldi	r20, 0xFC	; 252
 728:	5e ef       	ldi	r21, 0xFE	; 254
 72a:	12 cf       	rjmp	.-476    	; 0x550 <main+0x186>
		
	init(inbuf, (uint8_t)BUFLEN, output, (uint8_t)OUTLEN, getAddress());
	
    while(1) {
		doTick();
        switch (cmd) {
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	a1 f0       	breq	.+40     	; 0x758 <main+0x38e>
 730:	82 30       	cpi	r24, 0x02	; 2
 732:	09 f0       	breq	.+2      	; 0x736 <main+0x36c>
 734:	71 ce       	rjmp	.-798    	; 0x418 <main+0x4e>
			case RGB_CMD_24_GRB_DATA:
				copyGRBBuf(inbuf, output);
				cmd = 0;
			break;
			case RGB_CMD_3_RGB_DATA:
				copy3BitBuf(inbuf, output);
 736:	6e ec       	ldi	r22, 0xCE	; 206
 738:	71 e0       	ldi	r23, 0x01	; 1
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	d7 dd       	rcall	.-1106   	; 0x2ee <copy3BitBuf>
				cmd = 0;
 740:	10 92 02 01 	sts	0x0102, r1
 744:	69 ce       	rjmp	.-814    	; 0x418 <main+0x4e>
			break;
			case RGB_CMD_BLU_DIM:
				PWM_BLU = inbuf[1];
			break;
			case RGB_CMD_GRN_DIM:
				PWM_GRN = inbuf[1];
 746:	80 91 04 01 	lds	r24, 0x0104
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	90 93 c3 00 	sts	0x00C3, r25
 750:	80 93 c2 00 	sts	0x00C2, r24
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 754:	1a 8e       	std	Y+26, r1	; 0x1a
			case RGB_CMD_BLU_DIM:
				PWM_BLU = inbuf[1];
			break;
			case RGB_CMD_GRN_DIM:
				PWM_GRN = inbuf[1];
			break;
 756:	61 ce       	rjmp	.-830    	; 0x41a <main+0x50>
 758:	4e ed       	ldi	r20, 0xDE	; 222
 75a:	51 e0       	ldi	r21, 0x01	; 1
 75c:	66 e0       	ldi	r22, 0x06	; 6
 75e:	71 e0       	ldi	r23, 0x01	; 1
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 760:	ca 01       	movw	r24, r20
 762:	fa 01       	movw	r30, r20
 764:	70 97       	sbiw	r30, 0x10	; 16
 766:	6f 01       	movw	r12, r30
 768:	fb 01       	movw	r30, r22
 76a:	7a 01       	movw	r14, r20
 76c:	18 e0       	ldi	r17, 0x08	; 8
 76e:	9f 01       	movw	r18, r30
 770:	22 50       	subi	r18, 0x02	; 2
 772:	31 09       	sbc	r19, r1
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
			out[(15-col) + (row * 24)]		= in[((col*3) + 1) + (row * 24)] >> 2;	// copy the green (order is flipped)
 774:	d9 01       	movw	r26, r18
 776:	2c 91       	ld	r18, X
 778:	26 95       	lsr	r18
 77a:	26 95       	lsr	r18
 77c:	d7 01       	movw	r26, r14
 77e:	2e 93       	st	-X, r18
 780:	7d 01       	movw	r14, r26
			out[col + (row * 24)]			= in[((col*3) + 3) + (row * 24)] >> 2;	// copy the blue
 782:	20 81       	ld	r18, Z
 784:	26 95       	lsr	r18
 786:	26 95       	lsr	r18
 788:	d6 01       	movw	r26, r12
 78a:	2d 93       	st	X+, r18
 78c:	6d 01       	movw	r12, r26
 78e:	9f 01       	movw	r18, r30
 790:	21 50       	subi	r18, 0x01	; 1
 792:	31 09       	sbc	r19, r1
			out[(col + 16) + (row * 24)]	= in[((col*3) + 2) + (row * 24)] >> 2;	// copy the red
 794:	d9 01       	movw	r26, r18
 796:	2c 91       	ld	r18, X
 798:	26 95       	lsr	r18
 79a:	26 95       	lsr	r18
 79c:	dc 01       	movw	r26, r24
 79e:	2d 93       	st	X+, r18
 7a0:	cd 01       	movw	r24, r26
 7a2:	11 50       	subi	r17, 0x01	; 1
 7a4:	33 96       	adiw	r30, 0x03	; 3
void copyGRBBuf(uint8_t * in, uint8_t * out)
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
		for (col = 0; col < 8; col++) {
 7a6:	11 11       	cpse	r17, r1
 7a8:	e2 cf       	rjmp	.-60     	; 0x76e <main+0x3a4>
 7aa:	48 5e       	subi	r20, 0xE8	; 232
 7ac:	5f 4f       	sbci	r21, 0xFF	; 255
 7ae:	68 5e       	subi	r22, 0xE8	; 232
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255

void copyGRBBuf(uint8_t * in, uint8_t * out)
{
	uint8_t row, col;
	
	for (row = 0; row < 8; row++) {
 7b2:	b2 e0       	ldi	r27, 0x02	; 2
 7b4:	4e 39       	cpi	r20, 0x9E	; 158
 7b6:	5b 07       	cpc	r21, r27
 7b8:	99 f6       	brne	.-90     	; 0x760 <main+0x396>
 7ba:	c2 cf       	rjmp	.-124    	; 0x740 <main+0x376>
        switch (cmd) {
			case RGB_CMD_ALL_DIM:
				PWM_ALL = inbuf[1];
			break;
			case RGB_CMD_BLU_DIM:
				PWM_BLU = inbuf[1];
 7bc:	80 91 04 01 	lds	r24, 0x0104
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	90 93 c5 00 	sts	0x00C5, r25
 7c6:	80 93 c4 00 	sts	0x00C4, r24
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 7ca:	1a 8e       	std	Y+26, r1	; 0x1a
			case RGB_CMD_ALL_DIM:
				PWM_ALL = inbuf[1];
			break;
			case RGB_CMD_BLU_DIM:
				PWM_BLU = inbuf[1];
			break;
 7cc:	26 ce       	rjmp	.-948    	; 0x41a <main+0x50>
	
    while(1) {
		doTick();
        switch (cmd) {
			case RGB_CMD_ALL_DIM:
				PWM_ALL = inbuf[1];
 7ce:	80 91 04 01 	lds	r24, 0x0104
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	9b bd       	out	0x2b, r25	; 43
 7d6:	8a bd       	out	0x2a, r24	; 42
void inline doTick(void) {
	uint8_t select = 0;
	uint8_t rowSelect = 0;
	register uint8_t out;
	
	for (rowSelect = 0; rowSelect < 8; rowSelect++) {
 7d8:	1a 8e       	std	Y+26, r1	; 0x1a
    while(1) {
		doTick();
        switch (cmd) {
			case RGB_CMD_ALL_DIM:
				PWM_ALL = inbuf[1];
			break;
 7da:	1f ce       	rjmp	.-962    	; 0x41a <main+0x50>

000007dc <memset>:
 7dc:	dc 01       	movw	r26, r24
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <memset+0x6>
 7e0:	6d 93       	st	X+, r22
 7e2:	41 50       	subi	r20, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	e0 f7       	brcc	.-8      	; 0x7e0 <memset+0x4>
 7e8:	08 95       	ret

000007ea <_exit>:
 7ea:	f8 94       	cli

000007ec <__stop_program>:
 7ec:	ff cf       	rjmp	.-2      	; 0x7ec <__stop_program>
